{"version":3,"sources":["app/features/homePage.js","app/reducers/skywalkersActions.js","app/features/skywalker.js","App.js","serviceWorker.js","app/reducers/skywalkersReducer.js","app/reducers/rootReducer.js","index.js"],"names":["HomePage","_this","this","fetch","then","response","json","skywalkers","props","addSkywalkers","skyList","list","length","map","skywalker","index","react_default","a","createElement","Button","color","animated","as","Link","to","concat","key","Content","visible","name","hidden","className","Component","connect","state","skywalkersList","dispatch","getState","type","Skywalker","App","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","initialState","skywalkersReducer","arguments","undefined","action","results","console","log","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAMMA,+LAEkB,IAAAC,EAAAC,KAChBC,MAAM,6DACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFN,EAAKO,MAAMC,cAAcF,sCAKjC,IAAIG,EAYJ,OAXGR,KAAKM,MAAMG,KAAKC,OAAO,IACtBF,EAAUR,KAAKM,MAAMG,KAAKE,IAAI,SAACC,EAAUC,GACrC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,SAAS,OAAOC,GAAIC,IAAMC,GAAE,cAAAC,OAAgBV,GAASW,IAAKX,GACzEC,EAAAC,EAAAC,cAACC,EAAA,EAAOQ,QAAR,CAAgBC,SAAO,GAAEd,EAAUe,MACnCb,EAAAC,EAAAC,cAACC,EAAA,EAAOQ,QAAR,CAAgBG,QAAM,GAAtB,sCAQhBd,EAAAC,EAAAC,cAAA,OAAKa,UAAW,iBACXrB,UAzBUsB,aA4CRC,cAZS,SAACC,GACrB,MAAO,CACHvB,KAAMuB,EAAM3B,WAAW4B,iBAIJ,SAACC,GACxB,MAAO,CACH3B,cAAe,SAACF,GAAD,OAAgB6B,EC9CV,SAAC7B,GAC1B,OAAM,SAAE6B,EAAUC,GACdD,EAAS,CAACE,KAAM,iBAAkB/B,gBD4CME,CAAcF,OAI/C0B,CAA6CjC,GEtC7CuC,mLARX,OACEvB,EAAAC,EAAAC,cAAA,wBAHkBc,aCiBTQ,mLAXX,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7C,IACjCgB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWN,aANtCP,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yFClBAC,EAAe,CACjBhB,eAAgB,IAkBLiB,EAfW,WAAgC,IAA/BlB,EAA+BmB,UAAAzC,OAAA,QAAA0C,IAAAD,UAAA,GAAAA,UAAA,GAAzBF,EAAcI,EAAWF,UAAAzC,OAAA,EAAAyC,UAAA,QAAAC,EACtD,OAAOC,EAAOjB,MACV,IAAK,iBAID,OAHAJ,EAAQ,CACJC,eAAgBoB,EAAOhD,WAAWiD,SAG1C,IAAK,mBAED,OADAC,QAAQC,IAAIH,EAAO1B,MACZK,EACX,QACA,OAAOA,ICRAyB,EAJKC,YAAgB,CAChCrD,WAAY6C,ICSVS,UAAQC,YAAYH,EAAaI,YAAgBC,OAEvDC,IAASC,OACLlD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAUN,MAAOA,GACb7C,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACApD,EAAAC,EAAAC,cAACmD,EAAD,QAESC,SAASC,eAAe,SH6GnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtE,KAAK,SAAAuE,GACjCA,EAAaC","file":"static/js/main.a0a39849.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addSkywalkers } from '../reducers/skywalkersActions'\nimport { Link } from 'react-router-dom'\nimport { Button } from 'semantic-ui-react'\n\nclass HomePage extends Component {\n\n    componentWillMount(){\n        fetch('https://swapi.co/api/people/?search=Skywalker&format=json')\n        .then(response => response.json())\n        .then(skywalkers => {\n            this.props.addSkywalkers(skywalkers);\n        })\n    }\n\n  render() {\n    let skyList;\n    if(this.props.list.length>0){\n        skyList = this.props.list.map((skywalker,index)=>{\n            return <Button color=\"red\" animated='fade' as={Link} to={`/skywalker/${index}`} key={index}>\n                        <Button.Content visible>{skywalker.name}</Button.Content>\n                        <Button.Content hidden>Sprawdź szczegóły</Button.Content>\n                     </Button>\n        });\n    }\n    \n    \n\n    return (\n        <div className={\"gridContainer\"}>\n            {skyList}\n        </div>\n      \n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        list: state.skywalkers.skywalkersList,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addSkywalkers: (skywalkers) => dispatch(addSkywalkers(skywalkers))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)\n","export const addSkywalkers = (skywalkers) => {\n    return( dispatch, getState) => {\n        dispatch({type: 'ADD_SKYWALKERS', skywalkers})\n    }\n}\n\nexport const deleteSkywalker = (name) => {\n    return( dispatch, getState) => {\n        dispatch({type: 'DELETE_SKYWALKER', name})\n    }\n}","import React, { Component } from 'react'\n\nclass Skywalker extends Component {\n  render() {\n    return (\n      <div>\n        hi\n      </div>\n    )\n  }\n}\n\nexport default Skywalker\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport HomePage from './app/features/homePage'\nimport Skywalker from './app/features/skywalker'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route exact path='/skywalker/:id' component={Skywalker} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    skywalkersList: [],\n}\n\nconst skywalkersReducer = (state=initialState, action) => {\n    switch(action.type){\n        case 'ADD_SKYWALKERS' :\n            state = {\n                skywalkersList: action.skywalkers.results,\n            }\n            return state;\n        case 'DELETE_SKYWALKER' :\n            console.log(action.name);\n            return state;\n        default:\n        return state\n    }\n}\n\nexport default skywalkersReducer","import { combineReducers } from 'redux'\nimport skywalkersReducer from './skywalkersReducer'\n\nconst rootReducer = combineReducers({\n    skywalkers: skywalkersReducer,\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './app/reducers/rootReducer'\nimport 'semantic-ui-css/semantic.min.css'\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n \nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n        <App />\n        </BrowserRouter>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}